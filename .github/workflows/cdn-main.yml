name: CDN - Deploy

on:
  push:
    branches:
      - main
    paths:
      - "cdn/**"

  workflow_dispatch:

defaults:
  run:
    working-directory: packages/cdn

jobs:
  deploy:
    runs-on: ubuntu-latest

    permissions:
      contents: read
      id-token: write

    steps:
      - name: üõí Checkout
        uses: actions/checkout@v4
        with:
          submodules: recursive

      - name: ‚öôÔ∏è  Setup Action
        uses: pnpm/action-setup@v4
        with:
          version: 9.14.4

      - name: üìö Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: 18
          cache: "pnpm"

      - name: üì¶ Install dependencies
        run: pnpm install --filter=@terminallyonline/plug-cdn

      - name: Deploy to Cloudflare R2
        run: |
          # Try to create bucket, ignore error if it already exists
          pnpm exec wrangler r2 bucket create plug-cdn || true

          # Get list of files in R2 (fixed command syntax)
          R2_FILES=$(pnpm exec wrangler r2 object list --bucket=plug-cdn --json | jq -r '.[].key')

          # Get list of local files (excluding node_modules and package.json)
          LOCAL_FILES=$(find . -type f -not -path "./node_modules/*" -not -name "package.json" | sed 's|^./||')

          # Delete files that exist in R2 but not locally
          for file in $R2_FILES; do
            if ! echo "$LOCAL_FILES" | grep -q "^$file$"; then
              echo "Deleting $file from R2..."
              pnpm exec wrangler r2 object delete --bucket=plug-cdn "$file"
            fi
          done

          # Upload/update local files
          for file in $(find . -type f -not -path "./node_modules/*" -not -name "package.json"); do
            pnpm exec wrangler r2 object put --bucket=plug-cdn "${file:2}" --file="$file"
          done
        env:
          CLOUDFLARE_API_TOKEN: ${{ secrets.CLOUDFLARE_API_TOKEN }}
          CLOUDFLARE_ACCOUNT_ID: ${{ secrets.CLOUDFLARE_ACCOUNT_ID }}

      - name: Purge Cache
        run: |
          curl -X POST "https://api.cloudflare.com/client/v4/zones/${{ secrets.CLOUDFLARE_ZONE_ID }}/purge_cache" \
            -H "Authorization: Bearer ${{ secrets.CLOUDFLARE_API_TOKEN }}" \
            -H "Content-Type: application/json" \
            --data '{"purge_everything":true}'
