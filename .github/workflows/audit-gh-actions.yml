name: Audit GitHub Actions

on:
  # Run weekly
  schedule:
    - cron: '0 16 * * 1'  # Runs at 10am CST/9am CDT on Mondays
  # Run on demand
  workflow_dispatch:
  # Run on pull requests that modify workflow files
  pull_request:
    paths:
      - '.github/workflows/**'

jobs:
  audit:
    name: Audit Actions for Pin Compliance
    runs-on: ubuntu-latest
    permissions:
      contents: read
      issues: write  # To create issues for unpinned actions
    
    steps:
      - name: Checkout code
        uses: actions/checkout@b4ffde65f46336ab88eb53be808477a3936bae11 # v4
      
      - name: Set up Python
        uses: actions/setup-python@0a5c61591373683505ea898e09a3ea4f39ef2b9c # v5
        with:
          python-version: '3.10'
      
      - name: Check for unpinned GitHub Actions
        id: audit
        run: |
          echo "Scanning workflow files for unpinned GitHub Actions..."
          
          # Create output file for unpinned actions
          echo "UNPINNED_ACTIONS<<EOF" >> $GITHUB_ENV
          
          find .github/workflows -name "*.yml" -o -name "*.yaml" | while read file; do
            echo "Checking $file"
            
            # Look for 'uses:' lines that don't have a commit hash
            unpinned=$(grep -n "uses:" "$file" | grep -v -E '@[0-9a-f]{40}' | grep -v "# No pin needed")
            
            if [ ! -z "$unpinned" ]; then
              echo "‚ö†Ô∏è Found unpinned actions in $file:" >> $GITHUB_ENV
              echo "$unpinned" | while read -r line; do
                line_number=$(echo "$line" | cut -d ':' -f 1)
                action_ref=$(echo "$line" | sed 's/.*uses: \(.*\)/\1/')
                echo "  - Line $line_number: $action_ref" >> $GITHUB_ENV
              done
              echo "" >> $GITHUB_ENV
            fi
          done
          
          echo "EOF" >> $GITHUB_ENV
          
          # Set output variable to indicate if any unpinned actions were found
          if grep -q "Found unpinned actions" <<< "$UNPINNED_ACTIONS"; then
            echo "has_unpinned=true" >> $GITHUB_OUTPUT
          else
            echo "has_unpinned=false" >> $GITHUB_OUTPUT
          fi
      
      - name: Create Issue for Unpinned Actions
        if: steps.audit.outputs.has_unpinned == 'true'
        uses: actions/github-script@60a0d83039c74a4aee543508d2ffcb1c3799cdea # v6
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const unpinnedActions = process.env.UNPINNED_ACTIONS;
            
            // Check if there's an open issue about unpinned actions
            const { data: issues } = await github.rest.issues.listForRepo({
              owner: context.repo.owner,
              repo: context.repo.repo,
              state: 'open',
              labels: ['critical', 'github_actions', 'devops']
            });
            
            // Format the issue body
            const body = `## Security Alert: Unpinned GitHub Actions
            
            The following GitHub Actions are not pinned to specific commit hashes in your workflows:
            
            ${unpinnedActions}
            
            ### Why is this important?
            
            Using version tags like \`@v3\` instead of commit SHAs makes your workflows vulnerable to supply chain attacks. If the action repository is compromised, malicious code could be executed in your CI/CD pipeline.
            
            ### How to fix:
            
            1. Find the full commit SHA for the version you're using
            2. Replace the version tag with the commit SHA
            3. Add a comment with the version for readability
            
            Example:
            \`\`\`yaml
            # Before
            - uses: actions/checkout@v4
            
            # After
            - uses: actions/checkout@b4ffde65f46336ab88eb53be808477a3936bae11 # v4
            \`\`\`
            
            This issue was automatically generated by the GitHub Actions audit workflow.`;
            
            if (issues.length === 0) {
              // Create a new issue
              await github.rest.issues.create({
                owner: context.repo.owner,
                repo: context.repo.repo,
                title: 'üîí Security: Unpinned GitHub Actions detected',
                body: body,
                labels: ['security', 'unpinned-actions']
              });
              console.log('Created new issue for unpinned actions');
            } else {
              // Update existing issue
              await github.rest.issues.update({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: issues[0].number,
                body: body
              });
              console.log(`Updated existing issue #${issues[0].number}`);
            }
      
      - name: Report Audit Status
        run: |
          if [ "${{ steps.audit.outputs.has_unpinned }}" == "true" ]; then
            echo "‚ö†Ô∏è WARNING: Unpinned GitHub Actions found!"
            echo "$UNPINNED_ACTIONS"
            echo ""
            echo "Please pin these actions to specific commit hashes to improve security."
            
            # For pull requests, we might want to fail the check
            if [[ "${{ github.event_name }}" == "pull_request" ]]; then
              exit 1
            fi
          else
            echo "‚úÖ All GitHub Actions are properly pinned to commit hashes. Good job!"
          fi