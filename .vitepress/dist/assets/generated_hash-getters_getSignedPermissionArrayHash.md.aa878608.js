import{_ as s,o as n,c as a,Q as e}from"./chunks/framework.6d94f49f.js";const m=JSON.parse('{"title":"getSignedPermissionArrayHash","description":"Encode an array of SignedPermissions into a hash and verify the decoded data to verify type compliance.","frontmatter":{"head":[["meta",{"property":"og:title","content":"getSignedPermissionArrayHash"}],["meta",{"name":"description","content":"Encode an array of SignedPermissions into a hash and verify the decoded data to verify type compliance."}],["meta",{"property":"og:description","content":"Encode an array of SignedPermissions into a hash and verify the decoded data to verify type compliance."}]],"notes":[[{"author":"Auto generated by @nftchance/plug-types/cli"}]]},"headers":[],"relativePath":"generated/hash-getters/getSignedPermissionArrayHash.md","filePath":"generated/hash-getters/getSignedPermissionArrayHash.md","lastUpdated":1699736593000}'),l={name:"generated/hash-getters/getSignedPermissionArrayHash.md"},p=e(`<h1 id="getsignedpermissionarrayhash" tabindex="-1">getSignedPermissionArrayHash <a class="header-anchor" href="#getsignedpermissionarrayhash" aria-label="Permalink to &quot;getSignedPermissionArrayHash&quot;">​</a></h1><p>Encode an array of <a href="/generated/base-types/SignedPermission.html">SignedPermissions</a> into a hash and verify the decoded <a href="/generated/base-types/SignedPermission.html">SignedPermission</a> data from a hash to verify type compliance.</p><h2 id="parameters" tabindex="-1">Parameters <a class="header-anchor" href="#parameters" aria-label="Permalink to &quot;Parameters&quot;">​</a></h2><ul><li><code>$input</code> : <a href="/generated/base-types/SignedPermission.html">SignedPermission[]</a> : The <code>SignedPermission[]</code> data to encode.</li></ul><h2 id="returns" tabindex="-1">Returns <a class="header-anchor" href="#returns" aria-label="Permalink to &quot;Returns&quot;">​</a></h2><ul><li><code>$hash</code> : <code>bytes32</code> : The hash of the encoded <a href="/generated/base-types/SignedPermission.html">SignedPermission</a> array data.</li></ul><h2 id="onchain-implementation" tabindex="-1">Onchain Implementation <a class="header-anchor" href="#onchain-implementation" aria-label="Permalink to &quot;Onchain Implementation&quot;">​</a></h2><p>With <code>getSignedPermissionArrayHash</code> you can call the function as a <code>read</code> and get the built hash back.</p><p>This is helpful in times when you need to build a message hash without tracking down all the types as well as when you need to verify a signed message hash containing a <code>SignedPermission[]</code> data type.</p><div class="vp-code-group vp-adaptive-theme"><div class="tabs"><input type="radio" name="group-lmh-U" id="tab-onrnt-w" checked="checked"><label for="tab-onrnt-w">Types.sol:getSignedPermissionArrayHash</label></div><div class="blocks"><div class="language-solidity vp-adaptive-theme active line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">solidity</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">function</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">getSignedPermissionArrayHash</span><span style="color:#E1E4E8;">(</span></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#F97583;">SignedPermission</span><span style="color:#E1E4E8;">[] </span><span style="color:#F97583;">memory</span><span style="color:#E1E4E8;"> $</span><span style="color:#FFAB70;">input</span></span>
<span class="line"><span style="color:#E1E4E8;">)  </span><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">pure</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">virtual</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">returns</span><span style="color:#E1E4E8;"> (</span><span style="color:#79B8FF;">bytes32</span><span style="color:#E1E4E8;"> $</span><span style="color:#79B8FF;">hash</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#6A737D;">/// </span><span style="color:#F97583;">@dev</span><span style="color:#6A737D;"> Load the stack.</span></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#79B8FF;">bytes</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">memory</span><span style="color:#E1E4E8;"> encoded;</span></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#79B8FF;">uint256</span><span style="color:#E1E4E8;"> i;</span></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#79B8FF;">uint256</span><span style="color:#E1E4E8;"> length </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> $input.length;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#6A737D;">/// </span><span style="color:#F97583;">@dev</span><span style="color:#6A737D;"> Encode each item in the array.</span></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#F97583;">for</span><span style="color:#E1E4E8;"> (i; i </span><span style="color:#F97583;">&lt;</span><span style="color:#E1E4E8;"> length;) {</span></span>
<span class="line"><span style="color:#E1E4E8;">		encoded </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">bytes</span><span style="color:#E1E4E8;">.</span><span style="color:#B392F0;">concat</span><span style="color:#E1E4E8;">(</span></span>
<span class="line"><span style="color:#E1E4E8;">			encoded,</span></span>
<span class="line"><span style="color:#E1E4E8;">			</span><span style="color:#B392F0;">getSignedPermissionHash</span><span style="color:#E1E4E8;">($input[i])</span></span>
<span class="line"><span style="color:#E1E4E8;">		);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">		</span><span style="color:#F97583;">unchecked</span><span style="color:#E1E4E8;"> { i</span><span style="color:#F97583;">++</span><span style="color:#E1E4E8;">; }</span></span>
<span class="line"><span style="color:#E1E4E8;">	}</span></span>
<span class="line"><span style="color:#E1E4E8;">	</span></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#6A737D;">/// </span><span style="color:#F97583;">@dev</span><span style="color:#6A737D;"> Hash the encoded array.</span></span>
<span class="line"><span style="color:#E1E4E8;">	$</span><span style="color:#79B8FF;">hash</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">keccak256</span><span style="color:#E1E4E8;">(encoded);</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">function</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">getSignedPermissionArrayHash</span><span style="color:#24292E;">(</span></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#D73A49;">SignedPermission</span><span style="color:#24292E;">[] </span><span style="color:#D73A49;">memory</span><span style="color:#24292E;"> $</span><span style="color:#E36209;">input</span></span>
<span class="line"><span style="color:#24292E;">)  </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">pure</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">virtual</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">returns</span><span style="color:#24292E;"> (</span><span style="color:#005CC5;">bytes32</span><span style="color:#24292E;"> $</span><span style="color:#005CC5;">hash</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#6A737D;">/// </span><span style="color:#D73A49;">@dev</span><span style="color:#6A737D;"> Load the stack.</span></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#005CC5;">bytes</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">memory</span><span style="color:#24292E;"> encoded;</span></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#005CC5;">uint256</span><span style="color:#24292E;"> i;</span></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#005CC5;">uint256</span><span style="color:#24292E;"> length </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> $input.length;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#6A737D;">/// </span><span style="color:#D73A49;">@dev</span><span style="color:#6A737D;"> Encode each item in the array.</span></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#D73A49;">for</span><span style="color:#24292E;"> (i; i </span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;"> length;) {</span></span>
<span class="line"><span style="color:#24292E;">		encoded </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">bytes</span><span style="color:#24292E;">.</span><span style="color:#6F42C1;">concat</span><span style="color:#24292E;">(</span></span>
<span class="line"><span style="color:#24292E;">			encoded,</span></span>
<span class="line"><span style="color:#24292E;">			</span><span style="color:#6F42C1;">getSignedPermissionHash</span><span style="color:#24292E;">($input[i])</span></span>
<span class="line"><span style="color:#24292E;">		);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">		</span><span style="color:#D73A49;">unchecked</span><span style="color:#24292E;"> { i</span><span style="color:#D73A49;">++</span><span style="color:#24292E;">; }</span></span>
<span class="line"><span style="color:#24292E;">	}</span></span>
<span class="line"><span style="color:#24292E;">	</span></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#6A737D;">/// </span><span style="color:#D73A49;">@dev</span><span style="color:#6A737D;"> Hash the encoded array.</span></span>
<span class="line"><span style="color:#24292E;">	$</span><span style="color:#005CC5;">hash</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">keccak256</span><span style="color:#24292E;">(encoded);</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br></div></div></div></div>`,10),o=[p];function t(r,c,i,y,E,d){return n(),a("div",null,o)}const u=s(l,[["render",t]]);export{m as __pageData,u as default};
