import{_ as s,o as i,c as a,R as e}from"./chunks/framework.OBNbGUgv.js";const g=JSON.parse('{"title":"Getting Started","description":"Build your first protocol with Plug in minutes.","frontmatter":{"head":[["meta",{"property":"og:title","content":"Getting Started"}],["meta",{"name":"description","content":"Build your first protocol with Plug in minutes."}],["meta",{"property":"og:description","content":"Build your first protocol with Plug in minutes."}]]},"headers":[],"relativePath":"index.md","filePath":"index.md","lastUpdated":1707244544000}'),n={name:"index.md"},t=e(`<h1 id="getting-started" tabindex="-1">Getting Started <a class="header-anchor" href="#getting-started" aria-label="Permalink to &quot;Getting Started&quot;">​</a></h1><p>Plug is a <code>Solidity</code> protocol and <code>Typescript</code> interface for building and interacting with protocols that support declarative EVM transactions (plugs).</p><p>You can learn about the rationale behind the project in the <a href="/introduction/why-plug.html">Why Plug</a> section.</p><h2 id="installation" tabindex="-1">Installation <a class="header-anchor" href="#installation" aria-label="Permalink to &quot;Installation&quot;">​</a></h2><p>To get up and running with <code>Plug</code>, you&#39;ll need to install the core protocol and the interface by opening a terminal and running the following command with your package manager of your choice:</p><div class="vp-code-group vp-adaptive-theme"><div class="tabs"><input type="radio" name="group-UjGfS" id="tab-Sh6PvF8" checked="checked"><label for="tab-Sh6PvF8">npm</label><input type="radio" name="group-UjGfS" id="tab-bWyAOHH"><label for="tab-bWyAOHH">pnpm</label><input type="radio" name="group-UjGfS" id="tab-ygTdtn9"><label for="tab-ygTdtn9">bun</label></div><div class="blocks"><div class="language-bash vp-adaptive-theme active line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">npm</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> i</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> @nftchance/plug-core</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><div class="language-bash vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">pnpm</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> i</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> @nftchance/plug-core</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><div class="language-bash vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">bun</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> i</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> @nftchance/plug-core</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div></div></div><h2 id="quickstart" tabindex="-1">Quickstart <a class="header-anchor" href="#quickstart" aria-label="Permalink to &quot;Quickstart&quot;">​</a></h2><p>All in all there are really only 2 steps when interacting with <code>Plug</code>.</p><h3 id="_1-setup-your-protocol" tabindex="-1">1. Setup your Protocol <a class="header-anchor" href="#_1-setup-your-protocol" aria-label="Permalink to &quot;1. Setup your Protocol&quot;">​</a></h3><p>Integrating <code>Plug</code> into your protocol is as simple as inheriting from the <code>Plug</code> contract and passing in your protocol&#39;s name and version to declare the <a href="https://eips.ethereum.org/EIPS/eip-712#definition-of-domainseparator" target="_blank" rel="noreferrer">domain</a> of your protocol&#39;s plugs:</p><div class="vp-code-group vp-adaptive-theme"><div class="tabs"><input type="radio" name="group--T7bN" id="tab-_lc8OC5" checked="checked"><label for="tab-_lc8OC5">PeerToPeerBridge.sol</label></div><div class="blocks"><div class="language-solidity vp-adaptive-theme active line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">solidity</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// SPDX-License-Identifier: MIT</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">pragma</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;"> solidity</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 0.8.23</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"></span>
<span class="line highlighted"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">PlugReceiver</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">from</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;@nftchance/plug-core/src/contracts/abstracts/Plug.Receiver.sol&#39;</span></span>
<span class="line"></span>
<span class="line highlighted"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">contract PeerToPeerBridge is PlugReceiver {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    /// @</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">dev</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Include</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> the</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> code</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> of</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> your</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> primitive</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span></span>
<span class="line highlighted"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br></div></div></div></div><p>By inheriting from <code>Plug</code>, <code>plug</code> and <code>plugContract</code> are added to your protocol enabling full support for plugs in just those few lines; <strong>there is no need to write any additional code or fiddle with the internals of the protocol.</strong></p><p>If you&#39;re not a developer, this step will have already been completed for you.</p><h3 id="_2-sign-the-plug" tabindex="-1">2. Sign the Plug <a class="header-anchor" href="#_2-sign-the-plug" aria-label="Permalink to &quot;2. Sign the Plug&quot;">​</a></h3><p>With your target contract prepared, it is now time to configure the conditions under which the transaction can be executed and distribute the fuses. Let&#39;s go ahead and declare the fuse tree for our intent and allow execution to safely be by an account in the Executor pool:</p><div class="vp-code-group vp-adaptive-theme"><div class="tabs"><input type="radio" name="group-RFDlv" id="tab-GzDZDud" checked="checked"><label for="tab-GzDZDud">./example.ts</label></div><div class="blocks"><div class="language-typescript vp-adaptive-theme active line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki shiki-themes github-light github-dark has-focused-lines vp-code"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// * Create a new instance of the Plug framework.</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> framework</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Plug</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(name, version, chainId, constants.types, contract);</span></span>
<span class="line"></span>
<span class="line has-focus"></span>
<span class="line has-focus"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> plugs</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> await</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> framework.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">sign</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(owner, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Plugs&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, {</span></span>
<span class="line has-focus"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  delegate: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">getAddress</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(owner.account.address),</span></span>
<span class="line has-focus"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  authority: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">bytes32</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">),</span></span>
<span class="line has-focus"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  fuses: [],</span></span>
<span class="line has-focus"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  salt: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">bytes32</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(Date.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">now</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">().</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">toString</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()),</span></span>
<span class="line highlighted has-focus"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">});</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br></div></div></div></div><p>Behind the scenes a lot happens so it may take a minute to wrap your head around it fully. As you&#39;re getting more familiar with the architecture, you have all the help of <code>Typescript</code> autocomplete at your fingertips. <strong>Don&#39;t be afraid to use it.</strong></p><h3 id="_3-submit-the-plug" tabindex="-1">3. Submit the Plug <a class="header-anchor" href="#_3-submit-the-plug" aria-label="Permalink to &quot;3. Submit the Plug&quot;">​</a></h3><p>After signing, all there is left to do is submit the Plug to the Executor pool. This pool operates on an open API mechanism which means you can choose to use the first-party service provided or spin up your own instance and settle your own transactions.</p><p>When you&#39;re ready, all you have to do is run a single line of code like:</p><div class="language-typescript vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">plugs.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">submit</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div>`,21),l=[t];function p(r,h,o,d,c,k){return i(),a("div",null,l)}const b=s(n,[["render",p]]);export{g as __pageData,b as default};
