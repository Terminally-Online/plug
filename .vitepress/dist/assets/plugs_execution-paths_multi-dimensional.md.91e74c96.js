import{_ as e,o as n,c as s,Q as o}from"./chunks/framework.850b4e59.js";const y=JSON.parse('{"title":"Multi-Dimensional Nonces","description":"With multi-dimensional nonces, you can revoke a set of pins without impacting the rest of your queues.","frontmatter":{"head":[["meta",{"property":"og:title","content":"Multi-Dimensional Nonces"}],["meta",{"name":"description","content":"With multi-dimensional nonces, you can revoke a set of pins without impacting the rest of your queues."}],["meta",{"property":"og:description","content":"With multi-dimensional nonces, you can revoke a set of pins without impacting the rest of your queues."}]]},"headers":[],"relativePath":"plugs/execution-paths/multi-dimensional.md","filePath":"plugs/execution-paths/multi-dimensional.md","lastUpdated":null}'),a={name:"plugs/execution-paths/multi-dimensional.md"},t=o(`<h1 id="multi-dimensional-nonces" tabindex="-1">Multi-Dimensional Nonces <a class="header-anchor" href="#multi-dimensional-nonces" aria-label="Permalink to &quot;Multi-Dimensional Nonces&quot;">​</a></h1><p>We just covered the details of a <a href="/plugs/execution-paths/single-lane.html">Single Lane</a> <code>nonce</code>, but what about a multi-dimensional <code>queue-nonce</code>? What is it and why is it important?</p><h2 id="nonce-queues" tabindex="-1">Nonce Queues <a class="header-anchor" href="#nonce-queues" aria-label="Permalink to &quot;Nonce Queues&quot;">​</a></h2><p><code>Plug</code> uses a multi-dimensional <code>queue-nonce</code> architecture that introduces the ability to have multiple <code>nonces</code> for every account on every protocol. In practice this looks like:</p><div class="vp-code-group vp-adaptive-theme"><div class="tabs"><input type="radio" name="group-Rpbvj" id="tab-VTB4HRz" checked="checked"><label for="tab-VTB4HRz">Nonces.sol</label></div><div class="blocks"><div class="language-solidity vp-adaptive-theme active line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">solidity</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;">/// </span><span style="color:#F97583;">@dev</span><span style="color:#6A737D;"> Single lane nonce implementation.</span></span>
<span class="line"><span style="color:#F97583;">mapping</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">address</span><span style="color:#E1E4E8;"> sender </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">uint256</span><span style="color:#E1E4E8;"> nonce) </span><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> senderToNonce;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">/// </span><span style="color:#F97583;">@dev</span><span style="color:#6A737D;"> Multi-dimensional nonce implementation.</span></span>
<span class="line"><span style="color:#6A737D;">/// </span><span style="color:#F97583;">@notice</span><span style="color:#6A737D;"> A \`uint256\` is functionally the same as \`bytes32\`.</span></span>
<span class="line"><span style="color:#F97583;">mapping</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">address</span><span style="color:#E1E4E8;"> sender </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">mapping</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">uint256</span><span style="color:#E1E4E8;"> queue </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">uint256</span><span style="color:#E1E4E8;"> nonce)) </span><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> senderToQueueToNonce;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">/// </span><span style="color:#D73A49;">@dev</span><span style="color:#6A737D;"> Single lane nonce implementation.</span></span>
<span class="line"><span style="color:#D73A49;">mapping</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">address</span><span style="color:#24292E;"> sender </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">uint256</span><span style="color:#24292E;"> nonce) </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> senderToNonce;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">/// </span><span style="color:#D73A49;">@dev</span><span style="color:#6A737D;"> Multi-dimensional nonce implementation.</span></span>
<span class="line"><span style="color:#6A737D;">/// </span><span style="color:#D73A49;">@notice</span><span style="color:#6A737D;"> A \`uint256\` is functionally the same as \`bytes32\`.</span></span>
<span class="line"><span style="color:#D73A49;">mapping</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">address</span><span style="color:#24292E;"> sender </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">mapping</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">uint256</span><span style="color:#24292E;"> queue </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">uint256</span><span style="color:#24292E;"> nonce)) </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> senderToQueueToNonce;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div></div></div><p><strong>Simple, right?</strong> This means instead of using a one-way backroad for replay protection, users have the ability to step on the highway that has multiple <code>queues</code> each with their own <code>nonce</code> and rate of flow.</p><p>With this functionality available, a user maintains the ability to revoke a set of pins and even expire an entire <code>queue</code> of pins without impacting every other set of pins and plugs previously signed.</p><ul><li>Submit a transaction in queue <code>3</code>, your <code>queue-nonce</code> is incremented by 1.</li><li>Submit another transaction in queue <code>3</code> with a lower <code>queue-nonce</code>, it&#39;s rejected.</li><li>Submit a transaction in queue <code>4</code> with a lower <code>nonce</code> than the previous transaction in queue <code>3</code>, it&#39;s accepted.</li></ul><p>Each <code>queue</code> is independent and can be incremented without impacting the others.</p><h2 id="the-technical-benefit" tabindex="-1">The Technical Benefit <a class="header-anchor" href="#the-technical-benefit" aria-label="Permalink to &quot;The Technical Benefit&quot;">​</a></h2><p>To illustrate the benefit of <a href="#nonce-queues">nonce queues</a> let&#39;s look at a simple example where we&#39;d like to expire an plugs already distributed where:</p><ul><li>The current lane <code>nonce</code> is <code>45</code>.</li><li>We have <code>10</code> active plugs (nonces <code>45-54</code>).</li><li>We&#39;d like to expire the <code>6th</code> pending intent (nonce <code>50</code>).</li></ul><p><strong>With single-lane nonces:</strong> We would increment our <code>nonce</code> to <code>50</code> and all of our previous <code>nonces</code> would be invalidated. This seems great at first, but in reality nonces <code>45-49</code> should still be valid and active.</p><p><strong>With multi-dimensional nonces:</strong> If the <code>queue-nonce</code> of the order we&#39;d like to expire is <code>50-1</code>, we simply roll to <code>50-2</code>. Critically, every <code>queue</code> outside of <code>50</code> is still valid and active completely independent of the changes just made. This means that we can expire a set of pins without impacting the rest of our previous declarations.</p><p>Of course, this is a very simple example and the benefit of this functionality entirely depends on the complexity of the protocol and app-level implementation, but the core concept remains.</p><h2 id="the-experience-benefit" tabindex="-1">The Experience Benefit <a class="header-anchor" href="#the-experience-benefit" aria-label="Permalink to &quot;The Experience Benefit&quot;">​</a></h2><p>The technical benefit of <a href="#nonce-queues">nonce queues</a> is clear, but the experience benefit is even more important. With multi-dimensional queues users of EVM blockchains unlock embedded access control that is not only more secure, but more flexible and user-friendly resulting in:</p><ul><li>Lower wasted gas money.</li><li>Lower counterparty risk.</li><li>Lower smart contract risk.</li><li>Lower exposure to bad actors.</li><li>Lower chance of human error.</li></ul><div class="tip custom-block"><p class="custom-block-title">TIP</p><p>It is very important to note that this benefit is really only possible due to the underlying single-lane system of EVM blockchains. While an amazing unlock alone, it is not a replacement for the security of the underlying blockchain.</p></div>`,19),l=[t];function i(c,p,r,d,u,h){return n(),s("div",null,l)}const b=e(a,[["render",i]]);export{y as __pageData,b as default};
