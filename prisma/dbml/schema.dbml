//// ------------------------------------------------------
//// THIS FILE WAS AUTOMATICALLY GENERATED (DO NOT MODIFY)
//// ------------------------------------------------------

Table ConsoleColumn {
  id String [pk]
  createdAt DateTime [default: `now()`, not null]
  updatedAt DateTime [default: `now()`, not null]
  key String [not null]
  index Int [not null]
  width Int
  item String
  from String
  socket UserSocket [not null]
  socketId String [not null]
}

Table FarcasterUserAddress {
  id String [pk]
  createdAt DateTime [default: `now()`, not null]
  updatedAt DateTime [default: `now()`, not null]
  farcasterUsers FarcasterUser [not null]
}

Table FarcasterUser {
  id String [pk]
  createdAt DateTime [default: `now()`, not null]
  updatedAt DateTime [default: `now()`, not null]
  identity SocketIdentity
  addresses FarcasterUserAddress [not null]
  followers FarcasterUser [not null]
  following FarcasterUser [not null]
}

Table ENS {
  createdAt DateTime [default: `now()`, not null]
  updatedAt DateTime [default: `now()`, not null]
  name String [pk]
  avatar String
  identity SocketIdentity
}

Table SocketIdentity {
  createdAt DateTime [default: `now()`, not null]
  updatedAt DateTime [default: `now()`, not null]
  socket UserSocket [not null]
  socketId String [pk]
  farcaster FarcasterUser
  farcasterId String [unique]
  ens ENS
  ensName String [unique]
}

Table UserSocket {
  id String [pk]
  createdAt DateTime [default: `now()`, not null]
  updatedAt DateTime [default: `now()`, not null]
  admin Boolean [not null, default: false]
  socketAddress String [not null]
  identity SocketIdentity
  columns ConsoleColumn [not null]
  tokens TokenBalanceCache [not null]
  collectibles OpenseaCollectibleCache [not null]
  positions PositionCache [not null]
}

Table TokenPrice {
  id String [pk]
  createdAt DateTime [default: `now()`, not null]
  updatedAt DateTime [default: `now()`, not null]
  chain String [not null]
  address String [not null]
  price Float [not null, default: 0]
  change Float [not null, default: 0]
  decimals Int
  symbol String
  timestamp Int
  confidence Float
}

Table TokenBalance {
  id String [pk]
  createdAt DateTime [default: `now()`, not null]
  updatedAt DateTime [default: `now()`, not null]
  contract String [not null]
  balance Float
  name String
  symbol String
  decimals Int
  logo String
  cache TokenBalanceCache [not null]
  cacheSocketId String [not null]
  cacheChain String [not null]
}

Table TokenBalanceCache {
  createdAt DateTime [default: `now()`, not null]
  updatedAt DateTime [default: `now()`, not null]
  chain String [not null]
  tokens TokenBalance [not null]
  socket UserSocket [not null]
  socketId String [not null]

  indexes {
    (socketId, chain) [pk]
  }
}

Table Protocol {
  createdAt DateTime [default: `now()`, not null]
  updatedAt DateTime [default: `now()`, not null]
  name String [pk]
  icon String [not null]
  url String [not null]
  positions Position [not null]
}

Table Implementation {
  createdAt DateTime [default: `now()`, not null]
  updatedAt DateTime [default: `now()`, not null]
  chain String [not null]
  contract String [not null]
  decimals Int [not null]
  fungible Fungible [not null]
  fungibleName String [not null]
  fungibleSymbol String [not null]

  indexes {
    (chain, contract) [pk]
  }
}

Table Fungible {
  createdAt DateTime [default: `now()`, not null]
  updatedAt DateTime [default: `now()`, not null]
  name String [not null]
  symbol String [not null]
  icon String [not null]
  verified Boolean [not null]
  implementations Implementation [not null]
  positions Position [not null]

  indexes {
    (name, symbol) [pk]
  }
}

Table Position {
  id String [pk]
  createdAt DateTime [default: `now()`, not null]
  updatedAt DateTime [default: `now()`, not null]
  chain String [not null]
  type String [not null]
  balance Float [not null]
  fungible Fungible [not null]
  fungibleName String [not null]
  fungibleSymbol String [not null]
  protocol Protocol
  protocolName String
  cache PositionCache [not null]
  cacheId String [not null]
}

Table PositionCache {
  createdAt DateTime [default: `now()`, not null]
  updatedAt DateTime [default: `now()`, not null]
  positions Position [not null]
  socket UserSocket [not null]
  socketId String [pk]
}

Table OpenseaCollection {
  slug String [pk]
  createdAt DateTime [default: `now()`, not null]
  updatedAt DateTime [default: `now()`, not null]
  collection String [not null]
  name String [not null]
  description String [not null]
  imageUrl String [not null]
  bannerImageUrl String [not null]
  owner String [not null]
  category String [not null]
  isDisabled Boolean [not null]
  isNsfw Boolean [not null]
  traitOffersEnabled Boolean [not null]
  collectionOffersEnabled Boolean [not null]
  openseaUrl String [not null]
  projectUrl String [not null]
  wikiUrl String [not null]
  discordUrl String [not null]
  telegramUrl String [not null]
  twitterUsername String [not null]
  instagramUsername String [not null]
  totalSupply Int [not null]
  chain String [not null]
  collectibles OpenseaCollectible [not null]
}

Table OpenseaCollectibleMetadata {
  id String [pk]
  createdAt DateTime [default: `now()`, not null]
  updatedAt DateTime [default: `now()`, not null]
  traits Json[] [not null]
  color String
  collectible OpenseaCollectible [not null]
  collectibleId String [unique, not null]
}

Table OpenseaCollectible {
  id String [pk]
  createdAt DateTime [default: `now()`, not null]
  updatedAt DateTime [default: `now()`, not null]
  identifier String [not null]
  contract String [not null]
  tokenStandard String [not null]
  name String
  description String
  imageUrl String
  displayImageUrl String
  displayAnimationUrl String
  metadataUrl String
  openseaUrl String [not null]
  isDisabled Boolean [not null]
  isNsfw Boolean [not null]
  owner String [not null]
  metadata OpenseaCollectibleMetadata
  collection OpenseaCollection [not null]
  collectionSlug String [not null]
  cache OpenseaCollectibleCache [not null]
  cacheSocketId String [not null]
  cacheChain String [not null]
}

Table OpenseaCollectibleCache {
  createdAt DateTime [default: `now()`, not null]
  updatedAt DateTime [default: `now()`, not null]
  chain String [not null]
  collectibles OpenseaCollectible [not null]
  socket UserSocket [not null]
  socketId String [not null]

  indexes {
    (socketId, chain) [pk]
  }
}

Table Workflow {
  id String [pk]
  createdAt DateTime [default: `now()`, not null]
  updatedAt DateTime [default: `now()`, not null]
  userAddress String [not null]
  name String [not null, default: 'Untitled Plug']
  isCurated Boolean [not null, default: false]
  isPrivate Boolean [not null, default: false]
  actions String [not null, default: '[]']
  color String [not null]
  tags String[] [not null]
  workflowForkedId String
}

Table FeatureRequest {
  id String [pk]
  createdAt DateTime [default: `now()`, not null]
  updatedAt DateTime [default: `now()`, not null]
  userAddress String [not null]
  context String [not null]
  message String
}

Table FarcasterAddresses {
  farcasterusersId String [ref: > FarcasterUser.id]
  addressesId String [ref: > FarcasterUserAddress.id]
}

Table FarcasterFollows {
  followersId String [ref: > FarcasterUser.id]
  followingId String [ref: > FarcasterUser.id]
}

Ref: ConsoleColumn.socketId > UserSocket.id

Ref: SocketIdentity.socketId - UserSocket.id

Ref: SocketIdentity.farcasterId - FarcasterUser.id [delete: Set Null]

Ref: SocketIdentity.ensName - ENS.name [delete: Set Null]

Ref: TokenBalance.(cacheSocketId, cacheChain) > TokenBalanceCache.(socketId, chain)

Ref: TokenBalanceCache.socketId > UserSocket.id

Ref: Implementation.(fungibleName, fungibleSymbol) > Fungible.(name, symbol) [delete: Cascade]

Ref: Position.(fungibleName, fungibleSymbol) > Fungible.(name, symbol) [delete: Cascade]

Ref: Position.protocolName > Protocol.name [delete: Cascade]

Ref: Position.cacheId > PositionCache.socketId [delete: Cascade]

Ref: PositionCache.socketId > UserSocket.id

Ref: OpenseaCollectibleMetadata.collectibleId - OpenseaCollectible.id [delete: Cascade]

Ref: OpenseaCollectible.collectionSlug > OpenseaCollection.slug

Ref: OpenseaCollectible.(cacheSocketId, cacheChain) > OpenseaCollectibleCache.(socketId, chain)

Ref: OpenseaCollectibleCache.socketId > UserSocket.id