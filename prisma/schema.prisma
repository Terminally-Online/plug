generator client {
    provider        = "prisma-client-js"
    previewFeatures = ["fullTextSearch"]
}

generator dbml {
    provider = "prisma-dbml-generator"
}

datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
}

model UserSocket {
    name          String
    userAddress   String
    socketAddress String
    createdAt     DateTime @default(now())
    updatedAt     DateTime @default(now()) @updatedAt

    @@id([userAddress, socketAddress])
}

model Workflow {
    id          String   @id @default(uuid())
    name        String   @default("Untitled Plug")
    userAddress String
    actions     String   @default("[]")
    color       String
    tags        String[]
    isCurated   Boolean  @default(false)
    isPrivate   Boolean  @default(false)
    createdAt   DateTime @default(now())
    updatedAt   DateTime @default(now()) @updatedAt

    workflowForkedId String?
}

model FeatureRequest {
    id          String   @id @default(uuid())
    userAddress String // save the users address
    context     String // save the search
    message     String? // user input, optional
    createdAt   DateTime @default(now())
    updatedAt   DateTime @default(now()) @updatedAt
}

// model Plugs {
//     id String @id @default(uuid())

//     // Signature & simulation related fields.
//     chainId    Int[]
//     executions Execution[]

//     // Onchain fields.
//     socket  UserSocket       @relation(fields: [socketUserAddress, socketAddress], references: [userAddress, socketAddress])
//     actions WorkflowAction[]
//     salt    String
//     fee     Int

//     // Backwards relational fields.
//     socketUserAddress String
//     socketAddress     String
//     livePlugs         LivePlugs[]
// }

// model LivePlugs {
//     id String @id @default(uuid())

//     // Onchain fields.
//     plugs     Plugs  @relation(fields: [plugsId], references: [id])
//     plugsId   String
//     signature String

//     createdAt DateTime @default(now())
//     updatedAt DateTime @updatedAt

//     // Backwards relational fields.
//     socket            UserSocket @relation(fields: [socketUserAddress, socketAddress], references: [userAddress, socketAddress])
//     socketUserAddress String
//     socketAddress     String
// }

// model Execution {
//     id String @id @default(uuid())

//     simulation Boolean

//     // TODO: Store the results of a simulation.

//     createdAt DateTime @default(now())
//     updatedAt DateTime @updatedAt

//     Plugs   Plugs?  @relation(fields: [plugsId], references: [id])
//     plugsId String?
// }
