generator client {
    provider        = "prisma-client-js"
    previewFeatures = ["fullTextSearch", "omitApi"]
}

generator dbml {
    provider = "prisma-dbml-generator"
}

datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
}

model FarcasterUserAddress {
    // ---------------------------------------------------------------------------
    // Core
    // ---------------------------------------------------------------------------
    id        String   @id
    createdAt DateTime @default(now())
    updatedAt DateTime @default(now()) @updatedAt

    // ---------------------------------------------------------------------------
    // Many-to-many
    // ---------------------------------------------------------------------------
    farcasterUsers FarcasterUser[] @relation("FarcasterAddresses")
}

model FarcasterUser {
    // ---------------------------------------------------------------------------
    // Core
    // ---------------------------------------------------------------------------
    id        String   @id
    createdAt DateTime @default(now())
    updatedAt DateTime @default(now()) @updatedAt

    // ---------------------------------------------------------------------------
    // One-to-one
    // ---------------------------------------------------------------------------
    identity SocketIdentity?

    // ---------------------------------------------------------------------------
    // Many-to-many
    // ---------------------------------------------------------------------------
    addresses FarcasterUserAddress[] @relation("FarcasterAddresses")
    followers FarcasterUser[]        @relation("FarcasterFollows")
    following FarcasterUser[]        @relation("FarcasterFollows")
}

model ENS {
    // ---------------------------------------------------------------------------
    // Core
    // ---------------------------------------------------------------------------
    createdAt DateTime @default(now())
    updatedAt DateTime @default(now()) @updatedAt

    // ---------------------------------------------------------------------------
    // Fields
    // ---------------------------------------------------------------------------
    name   String  @id @unique
    avatar String?

    // ---------------------------------------------------------------------------
    // One-to-one
    // ---------------------------------------------------------------------------
    identity SocketIdentity?
}

model SocketIdentity {
    // ---------------------------------------------------------------------------
    // Core
    // ---------------------------------------------------------------------------
    createdAt DateTime @default(now())
    updatedAt DateTime @default(now()) @updatedAt

    // ---------------------------------------------------------------------------
    // One-to-one
    // ---------------------------------------------------------------------------
    socket      UserSocket     @relation(fields: [socketId], references: [id], onDelete: Cascade)
    socketId    String         @id @unique
    farcaster   FarcasterUser? @relation(fields: [farcasterId], references: [id], onDelete: SetNull)
    farcasterId String?        @unique
    ens         ENS?           @relation(fields: [ensName], references: [name], onDelete: SetNull)
    ensName     String?        @unique
}

model UserSocket {
    // ---------------------------------------------------------------------------
    // Core
    // ---------------------------------------------------------------------------
    id        String   @id @default(uuid())
    createdAt DateTime @default(now())
    updatedAt DateTime @default(now()) @updatedAt

    // ---------------------------------------------------------------------------
    // Fields
    // ---------------------------------------------------------------------------
    admin         Boolean @default(false)
    socketAddress String

    // ---------------------------------------------------------------------------
    // One-to-one
    // ---------------------------------------------------------------------------
    identity SocketIdentity?

    // ---------------------------------------------------------------------------
    // One-to-many 
    // ---------------------------------------------------------------------------
    workflow     Workflow[]
    collectibles OpenseaCollectibleCache[]
    balances     ImplementationBalance[]
    positions    PositionCache[]

    // ---------------------------------------------------------------------------
    // Indexes
    // ---------------------------------------------------------------------------
    @@index([socketAddress])
}

model Workflow {
    // ---------------------------------------------------------------------------
    // Core
    // ---------------------------------------------------------------------------
    id        String   @id @default(uuid())
    createdAt DateTime @default(now())
    updatedAt DateTime @default(now()) @updatedAt

    // ---------------------------------------------------------------------------
    // Fields
    // ---------------------------------------------------------------------------
    name             String   @default("Untitled Plug")
    isCurated        Boolean  @default(false)
    isPrivate        Boolean  @default(false)
    actions          String   @default("[]")
    color            String
    tags             String[]
    workflowForkedId String?

    // ---------------------------------------------------------------------------
    // Many-to-one
    // ---------------------------------------------------------------------------
    socket   UserSocket @relation(fields: [socketId], references: [id])
    socketId String
}

model TokenPrice {
    // ---------------------------------------------------------------------------
    // Core
    // ---------------------------------------------------------------------------
    id        String   @id
    createdAt DateTime @default(now())
    updatedAt DateTime @default(now()) @updatedAt

    // ---------------------------------------------------------------------------
    // Fields
    // ---------------------------------------------------------------------------
    chain      String
    address    String
    price      Float   @default(0)
    change     Float   @default(0)
    decimals   Int?
    symbol     String?
    timestamp  Int?
    confidence Float?
}

model Protocol {
    // ---------------------------------------------------------------------------
    // Core
    // ---------------------------------------------------------------------------
    createdAt DateTime @default(now())
    updatedAt DateTime @default(now()) @updatedAt

    // ---------------------------------------------------------------------------
    // Fields
    // ---------------------------------------------------------------------------
    name String @id
    icon String
    url  String

    // ---------------------------------------------------------------------------
    // Many-to-one
    // ---------------------------------------------------------------------------
    positions Position[]
}

model ImplementationBalance {
    // ---------------------------------------------------------------------------
    // Core
    // ---------------------------------------------------------------------------
    createdAt DateTime @default(now())
    updatedAt DateTime @default(now()) @updatedAt

    // ---------------------------------------------------------------------------
    // Fields
    // ---------------------------------------------------------------------------
    balance Float

    // ---------------------------------------------------------------------------
    // Many-to-one
    // ---------------------------------------------------------------------------
    implementation         Implementation @relation(fields: [implementationChain, implementationContract], references: [chain, contract])
    implementationChain    String
    implementationContract String
    socket                 UserSocket     @relation(fields: [socketId], references: [id])
    socketId               String

    @@id([socketId, implementationChain, implementationContract])
}

model Implementation {
    // ---------------------------------------------------------------------------
    // Core
    // ---------------------------------------------------------------------------
    createdAt DateTime @default(now())
    updatedAt DateTime @default(now()) @updatedAt

    // ---------------------------------------------------------------------------
    // Fields
    // ---------------------------------------------------------------------------
    chain    String
    contract String
    decimals Int

    // ---------------------------------------------------------------------------
    // One-to-many
    // ---------------------------------------------------------------------------
    fungible       Fungible @relation(fields: [fungibleName, fungibleSymbol], references: [name, symbol], onDelete: Cascade)
    fungibleName   String
    fungibleSymbol String

    // ---------------------------------------------------------------------------
    // Many-to-one
    // ---------------------------------------------------------------------------
    balances ImplementationBalance[]

    @@id([chain, contract])
}

model Fungible {
    // ---------------------------------------------------------------------------
    // Core
    // ---------------------------------------------------------------------------
    createdAt DateTime @default(now())
    updatedAt DateTime @default(now()) @updatedAt

    // ---------------------------------------------------------------------------
    // Fields
    // ---------------------------------------------------------------------------
    name     String
    symbol   String
    icon     String?
    verified Boolean

    // ---------------------------------------------------------------------------
    // Many-to-one
    // ---------------------------------------------------------------------------
    implementations Implementation[]
    positions       Position[]

    @@id([name, symbol])
}

model Position {
    // ---------------------------------------------------------------------------
    // Core
    // ---------------------------------------------------------------------------
    id        String   @id
    createdAt DateTime @default(now())
    updatedAt DateTime @default(now()) @updatedAt

    // ---------------------------------------------------------------------------
    // Fields
    // ---------------------------------------------------------------------------
    chain   String
    type    String
    balance Float?

    // ---------------------------------------------------------------------------
    // Many-to-one
    // ---------------------------------------------------------------------------
    fungible       Fungible      @relation(fields: [fungibleName, fungibleSymbol], references: [name, symbol], onDelete: Cascade)
    fungibleName   String
    fungibleSymbol String
    protocol       Protocol?     @relation(fields: [protocolName], references: [name], onDelete: Cascade)
    protocolName   String?
    cache          PositionCache @relation(fields: [cacheId], references: [socketId], onDelete: Cascade)
    cacheId        String
}

model PositionCache {
    // ---------------------------------------------------------------------------
    // Core
    // ---------------------------------------------------------------------------
    createdAt DateTime @default(now())
    updatedAt DateTime @default(now()) @updatedAt

    // ---------------------------------------------------------------------------
    // One-to-many
    // ---------------------------------------------------------------------------
    positions Position[]

    // ---------------------------------------------------------------------------
    // Many-to-one
    // ---------------------------------------------------------------------------
    socket   UserSocket @relation(fields: [socketId], references: [id], onDelete: Cascade)
    socketId String     @id
}

model OpenseaCollection {
    // ---------------------------------------------------------------------------
    // Core
    // ---------------------------------------------------------------------------
    slug      String   @id @unique
    createdAt DateTime @default(now())
    updatedAt DateTime @default(now()) @updatedAt

    // ---------------------------------------------------------------------------
    // Fields
    // ---------------------------------------------------------------------------
    collection              String
    name                    String
    description             String
    imageUrl                String
    bannerImageUrl          String
    owner                   String
    category                String
    isDisabled              Boolean
    isNsfw                  Boolean
    traitOffersEnabled      Boolean
    collectionOffersEnabled Boolean
    openseaUrl              String
    projectUrl              String
    wikiUrl                 String
    discordUrl              String
    telegramUrl             String
    twitterUsername         String
    instagramUsername       String
    totalSupply             Int
    chain                   String

    // ---------------------------------------------------------------------------
    // One-to-many
    // ---------------------------------------------------------------------------
    collectibles OpenseaCollectible[]

    // ---------------------------------------------------------------------------
    // Indexes
    // ---------------------------------------------------------------------------
    @@index([slug, chain])
}

model OpenseaCollectibleMetadata {
    // ---------------------------------------------------------------------------
    // Core
    // ---------------------------------------------------------------------------
    id        String   @id @default(uuid())
    createdAt DateTime @default(now())
    updatedAt DateTime @default(now()) @updatedAt

    // ---------------------------------------------------------------------------
    // Fields
    // ---------------------------------------------------------------------------
    traits Json[]
    color  String?

    // ---------------------------------------------------------------------------
    // One-to-one
    // ---------------------------------------------------------------------------
    collectible   OpenseaCollectible @relation(fields: [collectibleId], references: [id], onDelete: Cascade)
    collectibleId String             @unique
}

model OpenseaCollectible {
    // ---------------------------------------------------------------------------
    // Core
    // ---------------------------------------------------------------------------
    id        String   @id @default(uuid())
    createdAt DateTime @default(now())
    updatedAt DateTime @default(now())

    // ---------------------------------------------------------------------------
    // Fields
    // ---------------------------------------------------------------------------
    identifier          String
    contract            String
    tokenStandard       String
    name                String?
    description         String?
    imageUrl            String?
    displayImageUrl     String?
    displayAnimationUrl String?
    metadataUrl         String?
    openseaUrl          String
    isDisabled          Boolean
    isNsfw              Boolean
    owner               String

    // ---------------------------------------------------------------------------
    // One-to-one
    // ---------------------------------------------------------------------------
    metadata OpenseaCollectibleMetadata?

    // ---------------------------------------------------------------------------
    // Many-to-one
    // ---------------------------------------------------------------------------
    collection     OpenseaCollection       @relation(fields: [collectionSlug], references: [slug])
    collectionSlug String
    cache          OpenseaCollectibleCache @relation(fields: [cacheSocketId, cacheChain], references: [socketId, chain], onDelete: Cascade)
    cacheSocketId  String
    cacheChain     String
}

model OpenseaCollectibleCache {
    // ---------------------------------------------------------------------------
    // Core
    // ---------------------------------------------------------------------------
    createdAt DateTime @default(now())
    updatedAt DateTime @default(now()) @updatedAt

    // ---------------------------------------------------------------------------
    // Fields
    // ---------------------------------------------------------------------------
    chain String

    // ---------------------------------------------------------------------------
    // One-to-many
    // ---------------------------------------------------------------------------
    collectibles OpenseaCollectible[]

    // ---------------------------------------------------------------------------
    // Many-to-one
    // ---------------------------------------------------------------------------
    socket   UserSocket @relation(fields: [socketId], references: [id], onDelete: Cascade)
    socketId String

    // ---------------------------------------------------------------------------
    // Identification
    // ---------------------------------------------------------------------------
    @@id([socketId, chain])
}

model FeatureRequest {
    // ---------------------------------------------------------------------------
    // Core
    // ---------------------------------------------------------------------------
    id        String   @id @default(uuid())
    createdAt DateTime @default(now())
    updatedAt DateTime @default(now()) @updatedAt

    // ---------------------------------------------------------------------------
    // Fields
    // ---------------------------------------------------------------------------
    userAddress String
    context     String
    message     String?
}
