generator client {
    provider        = "prisma-client-js"
    previewFeatures = ["fullTextSearch"]
}

generator dbml {
    provider = "prisma-dbml-generator"
}

datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
}

model UserSocket {
    name          String
    userAddress   String
    socketAddress String
    createdAt     DateTime @default(now())
    updatedAt     DateTime @default(now()) @updatedAt

    @@id([userAddress, socketAddress])
}

model Workflow {
    id          String   @id @default(uuid())
    name        String   @default("Untitled Plug")
    userAddress String
    actions     String   @default("[]")
    color       String
    tags        String[]
    isCurated   Boolean  @default(false)
    isPrivate   Boolean  @default(false)
    createdAt   DateTime @default(now())
    updatedAt   DateTime @default(now()) @updatedAt

    workflowForkedId String?
}

model FeatureRequest {
    id          String   @id @default(uuid())
    userAddress String // save the users address
    context     String // save the search
    message     String? // user input, optional
    createdAt   DateTime @default(now())
    updatedAt   DateTime @default(now()) @updatedAt
}

model OpenseaCollection {
    slug                    String   @id @unique
    collection              String
    name                    String
    description             String
    imageUrl                String
    bannerImageUrl          String
    owner                   String
    category                String
    isDisabled              Boolean
    isNsfw                  Boolean
    traitOffersEnabled      Boolean
    collectionOffersEnabled Boolean
    openseaUrl              String
    projectUrl              String
    wikiUrl                 String
    discordUrl              String
    telegramUrl             String
    twitterUsername         String
    instagramUsername       String
    totalSupply             Int
    chain                   String
    createdDate             DateTime
}

// model Execution {
//     id String @id @default(uuid())

//     simulation Boolean

//     // TODO: Store the results of a simulation.

//     createdAt DateTime @default(now())
//     updatedAt DateTime @updatedAt

//     Plugs   Plugs?  @relation(fields: [plugsId], references: [id])
//     plugsId String?
// }
