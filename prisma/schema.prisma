generator client {
    provider        = "prisma-client-js"
    previewFeatures = ["fullTextSearch", "fullTextIndex"]
}

datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
}

// Authentication models. 

model Account {
    id                String  @id @default(cuid())
    userId            String
    type              String
    provider          String
    providerAccountId String
    refresh_token     String?
    access_token      String?
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String?
    session_state     String?
    user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
    id            String      @id @default(cuid())
    name          String?
    email         String?     @unique
    emailVerified DateTime?
    image         String?
    accounts      Account[]
    sessions      Session[]
    canvases      Canvas[]
    selecting     Component[]
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}

// Board models.

model Component {
    id String @id @default(uuid())

    top    Float
    left   Float
    width  Float
    height Float

    // * Field that prevents multiple users from selecting the same component
    selecting   User?   @relation(fields: [selectingId], references: [id])
    selectingId String?

    content   Json
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    Canvas   Canvas? @relation(fields: [canvasId], references: [id])
    canvasId String?
}

model Canvas {
    id        String   @id @default(uuid())
    name      String   @default("Untitled Canvas")
    user      User     @relation(fields: [userId], references: [id])
    userId    String
    public    Boolean  @default(false)
    color     String   @default("#ff4700")
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    components Component[]
}

// Protocol models.

model Address {
    id String @id

    livePlugs LivePlugs[]
}

model Domain {
    verifyingContract String
    name              String
    version           String
    chainId           Int

    @@id([verifyingContract, name, version, chainId])
}

model Current {
    name String
    type String
    data String

    plugs Plug[]

    @@id([name, type, data])
}

model Fuse {
    target String
    data   String

    plug   Plug?   @relation(fields: [plugId], references: [id])
    plugId String?

    @@id([target, data])
}

model Plug {
    id      String  @id @default(uuid())
    current Current @relation(fields: [currentName, currentType, currentData], references: [name, type, data])
    fuses   Fuse[]

    currentName String
    currentType String
    currentData String

    Plugs   Plugs?  @relation(fields: [plugsId], references: [id])
    plugsId String?
}

model Plugs {
    id String @id @default(uuid())

    socket               String
    plugs                Plug[]
    salt                 String
    fee                  Int
    maxFeePerGas         Int
    maxPriorityFeePerGas Int
    executor             String

    LivePlugs LivePlugs[]
}

model LivePlugs {
    plugs     Plugs  @relation(fields: [plugsId], references: [id])
    plugsId   String
    signature String

    address   Address @relation(fields: [addressId], references: [id])
    addressId String

    @@id([plugsId, addressId])
}
