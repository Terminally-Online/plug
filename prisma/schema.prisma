generator client {
    provider        = "prisma-client-js"
    previewFeatures = ["fullTextSearch"]
}

generator dbml {
    provider = "prisma-dbml-generator"
}

datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
}

model ConsoleColumn {
    id String @id @default(uuid())

    // ---------------------------------------------------------------------------
    // Core
    // ---------------------------------------------------------------------------
    createdAt DateTime @default(now())
    updatedAt DateTime @default(now()) @updatedAt

    // ---------------------------------------------------------------------------
    // Fields
    // ---------------------------------------------------------------------------
    key   String
    index Int
    width Int?

    // ---------------------------------------------------------------------------
    // Many-to-one
    // ---------------------------------------------------------------------------
    socket   UserSocket @relation(fields: [socketId], references: [id])
    socketId String
}

model UserSocket {
    id String @id @default(uuid())

    // ---------------------------------------------------------------------------
    // Core
    // ---------------------------------------------------------------------------
    createdAt DateTime @default(now())
    updatedAt DateTime @default(now()) @updatedAt

    // ---------------------------------------------------------------------------
    // Fields
    // ---------------------------------------------------------------------------
    socketAddress String

    // ---------------------------------------------------------------------------
    // One-to-many 
    // ---------------------------------------------------------------------------
    columns ConsoleColumn[]
}

model Workflow {
    // ---------------------------------------------------------------------------
    // Core
    // ---------------------------------------------------------------------------
    id        String   @id @default(uuid())
    createdAt DateTime @default(now())
    updatedAt DateTime @default(now()) @updatedAt

    // ---------------------------------------------------------------------------
    // Fields
    // ---------------------------------------------------------------------------
    userAddress      String
    name             String   @default("Untitled Plug")
    isCurated        Boolean  @default(false)
    isPrivate        Boolean  @default(false)
    actions          String   @default("[]")
    color            String
    tags             String[]
    workflowForkedId String?
}

model FeatureRequest {
    // ---------------------------------------------------------------------------
    // Core
    // ---------------------------------------------------------------------------
    id        String   @id @default(uuid())
    createdAt DateTime @default(now())
    updatedAt DateTime @default(now()) @updatedAt

    // ---------------------------------------------------------------------------
    // Fields
    // ---------------------------------------------------------------------------
    userAddress String
    context     String
    message     String?
}

model OpenseaCollection {
    // ---------------------------------------------------------------------------
    // Core
    // ---------------------------------------------------------------------------
    slug      String   @id @unique
    createdAt DateTime @default(now())
    updatedAt DateTime @default(now()) @updatedAt

    // ---------------------------------------------------------------------------
    // Fields
    // ---------------------------------------------------------------------------
    collection              String
    name                    String
    description             String
    imageUrl                String
    bannerImageUrl          String
    owner                   String
    category                String
    isDisabled              Boolean
    isNsfw                  Boolean
    traitOffersEnabled      Boolean
    collectionOffersEnabled Boolean
    openseaUrl              String
    projectUrl              String
    wikiUrl                 String
    discordUrl              String
    telegramUrl             String
    twitterUsername         String
    instagramUsername       String
    totalSupply             Int
    chain                   String

    // ---------------------------------------------------------------------------
    // One-to-many
    // ---------------------------------------------------------------------------
    collectibles OpenseaCollectible[]

    // ---------------------------------------------------------------------------
    // Indexes
    // ---------------------------------------------------------------------------
    @@index([slug, chain])
}

model OpenseaCollectible {
    // ---------------------------------------------------------------------------
    // Core
    // ---------------------------------------------------------------------------
    id        String   @id @default(uuid())
    createdAt DateTime @default(now())
    updatedAt DateTime @default(now())

    // ---------------------------------------------------------------------------
    // Fields
    // ---------------------------------------------------------------------------
    identifier          String
    contract            String
    tokenStandard       String
    name                String
    description         String?
    imageUrl            String?
    displayImageUrl     String?
    displayAnimationUrl String?
    metadataUrl         String?
    openseaUrl          String
    isDisabled          Boolean
    isNsfw              Boolean
    owner               String

    // ---------------------------------------------------------------------------
    // Many-to-one
    // ---------------------------------------------------------------------------
    collection     OpenseaCollection       @relation(fields: [collectionSlug], references: [slug])
    collectionSlug String
    cache          OpenseaCollectibleCache @relation(fields: [cacheChain, cacheOwner], references: [chain, owner])
    cacheChain     String
    cacheOwner     String
}

model OpenseaCollectibleCache {
    // ---------------------------------------------------------------------------
    // Core
    // ---------------------------------------------------------------------------
    createdAt DateTime @default(now())
    updatedAt DateTime @default(now()) @updatedAt

    // ---------------------------------------------------------------------------
    // Fields
    // ---------------------------------------------------------------------------
    chain String
    owner String

    // ---------------------------------------------------------------------------
    // One-to-many
    // ---------------------------------------------------------------------------
    collectibles OpenseaCollectible[]

    // ---------------------------------------------------------------------------
    // Identification
    // ---------------------------------------------------------------------------
    @@id([chain, owner])
}
